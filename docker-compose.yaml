version: "3.8"

services:
  datenmodell-backend:
    profiles:
      - datenmodell
    container_name: datenmodell-backend
    build:
      context: .
      dockerfile: ./datenmodell-backend/Dockerfile
      args:
        DB_URL: ${DB_URL}
        PG_USER: ${PG_USER}
        PG_PASSWORD: ${PG_PASSWORD}
    ports:
      - "8080:8080"
      - "5005:5005"
    environment:
      DB_URL: jdbc:postgresql://datenmodell-db:5432/postgres
      PG_USER: postgres
      PG_PASSWORD: postgres
      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,address=*:5005,server=y,suspend=n"
    depends_on:
      - datenmodell-db

  clientapp-backend:
    profiles:
      - clientapp
    container_name: clientapp-backend
    build:
      context: .
      dockerfile: ./clientapp-backend/Dockerfile
      args:
        DB_URL: ${DB_URL}
        PG_USER: ${PG_USER}
        PG_PASSWORD: ${PG_PASSWORD}
        JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,address=*:5005,server=y,suspend=n"
    ports:
      - "8080:8080"
      - "5005:5005"
    environment:
      DB_URL: jdbc:postgresql://clientapp-db:5432/postgres
      PG_USER: postgres
      PG_PASSWORD: postgres
    depends_on:
      - clientapp-db

  datenmodell-db:
    profiles:
      - datenmodell
    container_name: datenmodell-db
    image: postgres:15.8
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  clientapp-db:
    profiles:
      - clientapp
    container_name: clientapp-db
    image: postgres:15.8
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - pgclientdata:/var/lib/postgresql/data

  clientapp-keycloak-db:
    profiles:
      - clientapp
    container_name: clientapp-keycloak-db
    restart: unless-stopped
    image: postgres:16.4
    volumes:
      - clientapp_keycloak_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
      PGUSER: keycloak
    healthcheck:
      test: ["CMD-SHELL", "pg_isready || false"]
      interval: 30s
      timeout: 3s

  datenmodell-keycloak-db:
    profiles:
      - datenmodell
    container_name: datenmodell-keycloak-db
    restart: unless-stopped
    image: postgres:16.4
    volumes:
      - datenmodell_keycloak_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
      PGUSER: keycloak
    healthcheck:
      test: ["CMD-SHELL", "pg_isready || false"]
      interval: 30s
      timeout: 3s

  datenmodell-keycloak:
    profiles:
      - datenmodell
    container_name: datenmodell-keycloak
    restart: unless-stopped
    build:
      context: datenmodell-keycloak
      dockerfile: Dockerfile
    ports:
      - "20010:8080"
    env_file:
      - datenmodell-keycloak/.env.keycloak
    depends_on:
      - datenmodell-keycloak-db

  clientapp-keycloak:
    profiles:
      - clientapp
    container_name: clientapp-keycloak
    restart: unless-stopped
    build:
      context: clientapp-keycloak
      dockerfile: Dockerfile
    ports:
      - "20010:8080"
    env_file:
      - clientapp-keycloak/.env.keycloak
    depends_on:
      - clientapp-keycloak-db

volumes:
  pgdata: {}
  clientapp_keycloak_data: {}
  datenmodell_keycloak_data: {}
  pgclientdata: {}
