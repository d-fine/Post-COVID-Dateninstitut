package org.datenmodell.datenmodellbackend.controller.datacatalog

import java.util.UUID
import org.datenmodell.datenmodellbackend.nfdi4health.Nfdi4HealthApi
import org.openapitools.api.DatacatalogApi
import org.openapitools.model.DataCatalogInformation
import org.springframework.http.ResponseEntity
import org.springframework.security.access.prepost.PreAuthorize
import org.springframework.web.bind.annotation.RestController

@RestController
class DataCatalogController(
    private val nfdi4HealthApi: Nfdi4HealthApi,
) : DatacatalogApi {
  @PreAuthorize("hasRole('ADMIN')")
  // NOTE: The dataProvider only works for RKI datasets
  override fun getNFDI4HealthDataCatalog(): ResponseEntity<List<DataCatalogInformation>> {
    val nfdi4HealthResponse = nfdi4HealthApi.getApiResourcesPostRequest()
    // without explicitly casting the response contents to a map, the [] operator doesn't work
    // because the
    // autogenerated type of content is List<Object>
    val dataCatalogInformationList: List<DataCatalogInformation>? =
        nfdi4HealthResponse?.content?.map { entry ->
          val entryMap = entry as LinkedHashMap<String, Any>
          val resourceMap = entryMap["resource"] as LinkedHashMap<String, Any>

          val title =
              (resourceMap["titles"] as List<LinkedHashMap<String, Any>>)[0]["text"] as String
          val resourceContent =
              (resourceMap["descriptions"] as List<LinkedHashMap<String, Any>>)[0]["text"] as String
          val link = resourceMap["webpage"] as String
          val dataProvider = (resourceMap["collection"] as List<String>)[0]

          DataCatalogInformation(
              id = UUID.randomUUID().toString(),
              title = title,
              content = resourceContent,
              dataProvider = dataProvider,
              link = link,
          )
        }

    return ResponseEntity.ok(dataCatalogInformationList)
  }
}
